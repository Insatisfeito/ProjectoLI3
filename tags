!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Coord	ndavl.c	/^} Coord;$/;"	t	typeref:struct:sCoord	file:
DIM	ndavl.h	10;"	d
LinkedListPTR	mod_lista_ligada.h	/^} *LinkedListPTR; 				\/\/ Apontador para a lista ligada$/;"	t	typeref:struct:linkedList
MENU_H_INCLUDED	menu.h	2;"	d
MainList	mod_lista_ligada.h	/^typedef struct MainList {$/;"	s
MainList::elems	mod_lista_ligada.h	/^	LinkedListPTR elems;     			\/\/ Apontador para uma lista ligada                    $/;"	m	struct:MainList	access:public
MainList::func_compare	mod_lista_ligada.h	/^	int (*func_compare)(void*,void*);   \/\/ Função de comparação de elementos da lista ligada$/;"	m	struct:MainList	access:public
MainList::nelems	mod_lista_ligada.h	/^	int nelems;  						\/\/ Numero de elementos da lista ligada$/;"	m	struct:MainList	access:public
MainListPTR	mod_lista_ligada.h	/^} *MainListPTR; 						\/\/ Apontador para a estrutura de controlo$/;"	t	typeref:struct:MainList
NDAVL_H_INCLUDED	ndavl.h	2;"	d
UTILS_H_INCLUDED	utils.h	2;"	d
addChar	utils.c	/^char* addChar(char *dest, char chr){$/;"	f	signature:(char *dest, char chr)
addChar	utils.h	/^char* addChar(char *dest, char chr);$/;"	p	signature:(char *dest, char chr)
addCharEnd	utils.c	/^char* addCharEnd(char *dest, char chr){$/;"	f	signature:(char *dest, char chr)
addCharEnd	utils.h	/^char* addCharEnd(char *dest, char chr);$/;"	p	signature:(char *dest, char chr)
addnChar	utils.c	/^char* addnChar(char *dest, char chr, int i){$/;"	f	signature:(char *dest, char chr, int i)
addnChar	utils.h	/^char* addnChar(char *dest, char chr, int i);$/;"	p	signature:(char *dest, char chr, int i)
addnCharEnd	utils.c	/^char* addnCharEnd(char *dest, char chr, int i){$/;"	f	signature:(char *dest, char chr, int i)
addnCharEnd	utils.h	/^char* addnCharEnd(char *dest, char chr, int i);$/;"	p	signature:(char *dest, char chr, int i)
allocStr	utils.c	/^char* allocStr(char *dest, char *src){$/;"	f	signature:(char *dest, char *src)
allocStr	utils.h	/^char* allocStr(char *dest, char *src);$/;"	p	signature:(char *dest, char *src)
apagaelem	mod_lista_ligada.c	/^void apagaelem (LinkedListPTR *elem)$/;"	f	signature:(LinkedListPTR *elem)
apagaelem	mod_lista_ligada.h	/^void apagaelem (LinkedListPTR *elem);$/;"	p	signature:(LinkedListPTR *elem)
apagaelemlista	mod_lista_ligada.c	/^void apagaelemlista (MainListPTR lista, void* externdata)$/;"	f	signature:(MainListPTR lista, void* externdata)
apagaelemlista	mod_lista_ligada.h	/^void apagaelemlista(MainListPTR lista, void* externdata);$/;"	p	signature:(MainListPTR lista, void* externdata)
apagalista	mod_lista_ligada.c	/^void apagalista(MainListPTR lista)$/;"	f	signature:(MainListPTR lista)
apagalista	mod_lista_ligada.h	/^void apagalista(MainListPTR lista);$/;"	p	signature:(MainListPTR lista)
apagalistaaux	mod_lista_ligada.c	/^void apagalistaaux(LinkedListPTR *lista)$/;"	f	signature:(LinkedListPTR *lista)
apagalistaaux	mod_lista_ligada.h	/^void apagalistaaux(LinkedListPTR *lista);$/;"	p	signature:(LinkedListPTR *lista)
chooseSO	utils.c	/^void chooseSO(){$/;"	f
chooseSO	utils.h	/^void chooseSO();$/;"	p	signature:()
clearInputBuffer	utils.c	/^void clearInputBuffer(){$/;"	f
clearInputBuffer	utils.h	/^void clearInputBuffer();$/;"	p	signature:()
clearScreen	utils.c	/^void clearScreen(){$/;"	f
clearScreen	utils.h	/^void clearScreen();$/;"	p	signature:()
comparaX	ndavl.c	/^int comparaX( void* fst, void* snd ){$/;"	f	signature:( void* fst, void* snd )
comparaY	ndavl.c	/^int comparaY( void* fst, void* snd ){$/;"	f	signature:( void* fst, void* snd )
concatStr	utils.c	/^char* concatStr(char *dest, char *src){$/;"	f	signature:(char *dest, char *src)
concatStr	utils.h	/^char* concatStr(char *dest, char *src);$/;"	p	signature:(char *dest, char *src)
crialistaligada	mod_lista_ligada.c	/^MainListPTR crialistaligada(MainListPTR lista, int(*func_compare)(void*,void*)) {$/;"	f	signature:(MainListPTR lista, int(*func_compare)(void*,void*))
crialistaligada	mod_lista_ligada.h	/^MainListPTR crialistaligada(MainListPTR lista, int (*func_compare)(void *, void *));$/;"	p	signature:(MainListPTR lista, int (*func_compare)(void *, void *))
elems	mod_lista_ligada.h	/^	LinkedListPTR elems;     			\/\/ Apontador para uma lista ligada                    $/;"	m	struct:MainList	access:public
extdata	mod_lista_ligada.h	/^	void *extdata;      		\/\/ Apontador para o elemento da lista       $/;"	m	struct:linkedList	access:public
extendStr	utils.c	/^char* extendStr(char *str, int i){$/;"	f	signature:(char *str, int i)
extendStr	utils.h	/^char* extendStr(char *str, int i);$/;"	p	signature:(char *str, int i)
func_compare	mod_lista_ligada.h	/^	int (*func_compare)(void*,void*);   \/\/ Função de comparação de elementos da lista ligada$/;"	m	struct:MainList	access:public
getIntLoop	menu.c	/^int getIntLoop(){$/;"	f
getIntLoop	menu.h	/^int getIntLoop();$/;"	p	signature:()
height	ndavl.h	/^    int height[DIM];$/;"	v
inserelistahead	mod_lista_ligada.c	/^ int inserelistahead(MainListPTR lista, void *externdata) {$/;"	f	signature:(MainListPTR lista, void *externdata)
inserelistahead	mod_lista_ligada.h	/^int inserelistahead(MainListPTR lista, void* externdata);$/;"	p	signature:(MainListPTR lista, void* externdata)
isInt	utils.c	/^int isInt(int n){$/;"	f	signature:(int n)
isInt	utils.h	/^int isInt(int n);$/;"	p	signature:(int n)
l	ndavl.h	/^    struct sTree *l[DIM];$/;"	v	typeref:struct:sTree
linkedList	mod_lista_ligada.h	/^typedef struct linkedList {$/;"	s
linkedList::extdata	mod_lista_ligada.h	/^	void *extdata;      		\/\/ Apontador para o elemento da lista       $/;"	m	struct:linkedList	access:public
linkedList::prox	mod_lista_ligada.h	/^	struct linkedList *prox;	\/\/ Próximo elemento da lista$/;"	m	struct:linkedList	typeref:struct:linkedList::linkedList	access:public
main	main.c	/^int main(\/*int argc, char **argv*\/){$/;"	f
main	ndavl.c	/^int main(){$/;"	f
maxInt	utils.c	/^int maxInt(int a, int b){$/;"	f	signature:(int a, int b)
maxInt	utils.h	/^int maxInt(int a, int b);$/;"	p	signature:(int a, int b)
nelems	mod_lista_ligada.h	/^	int nelems;  						\/\/ Numero de elementos da lista ligada$/;"	m	struct:MainList	access:public
node	ndavl.h	/^    void *node;$/;"	v
operativeSystem	utils.h	/^char operativeSystem;$/;"	v
print	ndavl.c	/^void print( void *fst, int altura ){$/;"	f	signature:( void *fst, int altura )
printMenu	menu.c	/^int printMenu(int input){$/;"	f	signature:(int input)
printMenu	menu.h	/^int printMenu(int input);$/;"	p	signature:(int input)
procuraelemlista	mod_lista_ligada.c	/^LinkedListPTR procuraelemlista (MainListPTR lista, void *externdata)$/;"	f	signature:(MainListPTR lista, void *externdata)
procuraelemlista	mod_lista_ligada.h	/^LinkedListPTR procuraelemlista (MainListPTR lista, void *externdata);$/;"	p	signature:(MainListPTR lista, void *externdata)
prox	mod_lista_ligada.h	/^	struct linkedList *prox;	\/\/ Próximo elemento da lista$/;"	m	struct:linkedList	typeref:struct:linkedList::linkedList	access:public
r	ndavl.h	/^    struct sTree *r[DIM];$/;"	v	typeref:struct:sTree
readInt	utils.c	/^int readInt(){$/;"	f
readInt	utils.h	/^int readInt();$/;"	p	signature:()
readStr	utils.c	/^char* readStr(char *ptr){$/;"	f	signature:(char *ptr)
readStr	utils.h	/^char* readStr(char *ptr);$/;"	p	signature:(char *ptr)
rodape	main.c	/^char rodape[51] = "Programa iniciado";$/;"	v
sCoord	ndavl.c	/^typedef struct sCoord{$/;"	s	file:
sCoord::x	ndavl.c	/^    int x;$/;"	m	struct:sCoord	file:	access:public
sCoord::y	ndavl.c	/^    int y;$/;"	m	struct:sCoord	file:	access:public
strBuffer	utils.h	/^char strBuffer[501];$/;"	v
tree_getHeight	ndavl.c	/^int tree_getHeight(TreePt tree, int thisDim){$/;"	f	signature:(TreePt tree, int thisDim)
tree_insert	ndavl.c	/^int tree_insert( MainTreePt thisMainTree, void* node){$/;"	f	signature:( MainTreePt thisMainTree, void* node)
tree_insertRec	ndavl.c	/^int tree_insertRec( TreePt *thisTree, TreePt allocd, void* node, int thisDim, int (*compare)(void*,void*)){$/;"	f	signature:( TreePt *thisTree, TreePt allocd, void* node, int thisDim, int (*compare)(void*,void*))
tree_new	ndavl.c	/^MainTreePt tree_new( int (*compare[DIM])(void*,void*), void (*print[DIM])(void*,int)){$/;"	f	signature:( int (*compare[DIM])(void*,void*), void (*print[DIM])(void*,int))
tree_printOrdered	ndavl.c	/^void tree_printOrdered(MainTreePt thisMainTree, int thisDim){$/;"	f	signature:(MainTreePt thisMainTree, int thisDim)
tree_printOrderedRec	ndavl.c	/^void tree_printOrderedRec( TreePt thisTree, void (*print)(void*,int), int thisDim ){$/;"	f	signature:( TreePt thisTree, void (*print)(void*,int), int thisDim )
tree_search	ndavl.c	/^TreePt tree_search(MainTreePt thisMainTree, void* node, int thisDim){$/;"	f	signature:(MainTreePt thisMainTree, void* node, int thisDim)
tree_searchRec	ndavl.c	/^TreePt tree_searchRec(TreePt thisTreePt, void* node, int thisDim, int (*compare)(void*,void*)){$/;"	f	signature:(TreePt thisTreePt, void* node, int thisDim, int (*compare)(void*,void*))
tree_singleRotateWithLeftChild	ndavl.c	/^TreePt tree_singleRotateWithLeftChild( TreePt thisTreePt, int thisDim ){$/;"	f	signature:( TreePt thisTreePt, int thisDim )
tree_singleRotateWithRightChild	ndavl.c	/^TreePt tree_singleRotateWithRightChild( TreePt thisTreePt, int thisDim ){$/;"	f	signature:( TreePt thisTreePt, int thisDim )
x	ndavl.c	/^    int x;$/;"	m	struct:sCoord	file:	access:public
y	ndavl.c	/^    int y;$/;"	m	struct:sCoord	file:	access:public
