!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Camiao	dados.h	/^} Camiao, *CamiaoPt;$/;"	t	typeref:struct:sCamiao
CamiaoPt	dados.h	/^} Camiao, *CamiaoPt;$/;"	t	typeref:struct:sCamiao
Cliente	dados.h	/^} Cliente, *ClientePt;$/;"	t	typeref:struct:sCliente
ClientePt	dados.h	/^} Cliente, *ClientePt;$/;"	t	typeref:struct:sCliente
Conte   do	relatorio.tex	/^\\section{Conteúdo}$/;"	s
DADOS_H_INCLUDED	dados.h	7;"	d
DIM	mod_avl_n_dimensional.h	13;"	d
Estruturas de dados	relatorio.tex	/^\\subsection[Estruturas de dados]{Estruturas de dados -- Abordagem geral ao problema}$/;"	u
INPUT_H_INCLUDED	input.h	7;"	d
Introdu     o	relatorio.tex	/^\\section{Introdução}$/;"	s
Ligacoesida	dados.h	/^typedef struct Ligacoesida{$/;"	s
Ligacoesida::custo	dados.h	/^	float custo;$/;"	m	struct:Ligacoesida	access:public
Ligacoesida::distancia	dados.h	/^	float distancia;$/;"	m	struct:Ligacoesida	access:public
Ligacoesida::nome	dados.h	/^	char* nome;$/;"	m	struct:Ligacoesida	access:public
LigacoesidaPTR	dados.h	/^}*LigacoesidaPTR;$/;"	t	typeref:struct:Ligacoesida
Ligacoesvinda	dados.h	/^typedef struct Ligacoesvinda{$/;"	s
Ligacoesvinda::nome	dados.h	/^	char* nome;$/;"	m	struct:Ligacoesvinda	access:public
LigacoesvindaPTR	dados.h	/^}*LigacoesvindaPTR;$/;"	t	typeref:struct:Ligacoesvinda
LinkedListPTR	mod_lista_ligada.h	/^} *LinkedListPTR; 				\/\/ Apontador para a lista ligada$/;"	t	typeref:struct:linkedList
Localidade	dados.h	/^typedef struct Localidade{$/;"	s
Localidade::ligacoesida	dados.h	/^	MainListPTR ligacoesida;$/;"	m	struct:Localidade	access:public
Localidade::ligacoesvinda	dados.h	/^	MainListPTR ligacoesvinda;$/;"	m	struct:Localidade	access:public
Localidade::nome	dados.h	/^	char* nome;$/;"	m	struct:Localidade	access:public
LocalidadePTR	dados.h	/^}*LocalidadePTR;$/;"	t	typeref:struct:Localidade
Localidades	relatorio.tex	/^\\subsection[Localidades]{Localidades -- Tabela de Hash com chaining, Grafos e Listas Ligadas}$/;"	u
MENU_H_INCLUDED	menu.h	8;"	d
MOD_AVL_N_DIMENSIONAL_H_INCLUDED	mod_avl_n_dimensional.h	11;"	d
MOD_LISTA_LIGADA_H_INCLUDED	mod_lista_ligada.h	7;"	d
MOD_TABELA_HASH_H_INCLUDED	mod_tabela_hash.h	7;"	d
MainList	mod_lista_ligada.h	/^typedef struct MainList {$/;"	s
MainList::elems	mod_lista_ligada.h	/^	LinkedListPTR elems;     			\/\/ Apontador para uma lista ligada                    $/;"	m	struct:MainList	access:public
MainList::func_compare	mod_lista_ligada.h	/^	int (*func_compare)(void*,void*);   \/\/ Função de comparação de elementos da lista ligada$/;"	m	struct:MainList	access:public
MainList::nelems	mod_lista_ligada.h	/^	int nelems;  						\/\/ Numero de elementos da lista ligada$/;"	m	struct:MainList	access:public
MainListPTR	mod_lista_ligada.h	/^} *MainListPTR; 						\/\/ Apontador para a estrutura de controlo$/;"	t	typeref:struct:MainList
MainTree	mod_avl_n_dimensional.h	/^} MainTree, *MainTreePt;$/;"	t	typeref:struct:sMainTree
MainTreePt	mod_avl_n_dimensional.h	/^} MainTree, *MainTreePt;$/;"	t	typeref:struct:sMainTree
Resumo	relatorio.tex	/^\\section{Resumo}$/;"	s
SERIAL_H_INCLUDED	serial.h	8;"	d
TabelaHash	mod_tabela_hash.h	/^typedef struct TabelaHash{$/;"	s
TabelaHash::arraycell	mod_tabela_hash.h	/^	MainListPTR *arraycell;$/;"	m	struct:TabelaHash	access:public
TabelaHash::hash_function	mod_tabela_hash.h	/^	int (*hash_function)(void*,int);$/;"	m	struct:TabelaHash	access:public
TabelaHash::nelems	mod_tabela_hash.h	/^	int nelems;$/;"	m	struct:TabelaHash	access:public
TabelaHash::startcells	mod_tabela_hash.h	/^	int startcells;$/;"	m	struct:TabelaHash	access:public
TabelaHash::totalcells	mod_tabela_hash.h	/^	int totalcells;$/;"	m	struct:TabelaHash	access:public
TabelaHashPTR	mod_tabela_hash.h	/^}*TabelaHashPTR;$/;"	t	typeref:struct:TabelaHash
Tree	mod_avl_n_dimensional.h	/^} Tree, *TreePt;$/;"	t	typeref:struct:sTree
TreePt	mod_avl_n_dimensional.h	/^} Tree, *TreePt;$/;"	t	typeref:struct:sTree
UTILS_H_INCLUDED	utils.h	7;"	d
allocStr	utils.c	/^char* allocStr(char *dest, char *src){$/;"	f	signature:(char *dest, char *src)
allocStr	utils.h	/^char* allocStr(char *dest, char *src);$/;"	p	signature:(char *dest, char *src)
apagaElemento	mod_lista_ligada.c	/^void apagaElemento (LinkedListPTR *elem)$/;"	f	signature:(LinkedListPTR *elem)
apagaElemento	mod_lista_ligada.h	/^void apagaElemento (LinkedListPTR *elem);$/;"	p	signature:(LinkedListPTR *elem)
apagaElementoLista	mod_lista_ligada.c	/^int apagaElementoLista (MainListPTR lista, void* externdata)$/;"	f	signature:(MainListPTR lista, void* externdata)
apagaElementoLista	mod_lista_ligada.h	/^int apagaElementoLista (MainListPTR lista, void* externdata);$/;"	p	signature:(MainListPTR lista, void* externdata)
apagaElementoTabelaHash	mod_tabela_hash.c	/^int apagaElementoTabelaHash (TabelaHashPTR table, void* externdata)$/;"	f	signature:(TabelaHashPTR table, void* externdata)
apagaElementoTabelaHash	mod_tabela_hash.h	/^int apagaElementoTabelaHash (TabelaHashPTR table, void* externdata);$/;"	p	signature:(TabelaHashPTR table, void* externdata)
apagaLista	mod_lista_ligada.c	/^void apagaLista(MainListPTR lista)$/;"	f	signature:(MainListPTR lista)
apagaLista	mod_lista_ligada.h	/^void apagaLista(MainListPTR lista);$/;"	p	signature:(MainListPTR lista)
apagaListaAux	mod_lista_ligada.c	/^void apagaListaAux(LinkedListPTR *lista)$/;"	f	signature:(LinkedListPTR *lista)
apagaListaAux	mod_lista_ligada.h	/^void apagaListaAux(LinkedListPTR *lista);$/;"	p	signature:(LinkedListPTR *lista)
apagaTabelaHash	mod_tabela_hash.c	/^void apagaTabelaHash(TabelaHashPTR table)$/;"	f	signature:(TabelaHashPTR table)
apagaTabelaHash	mod_tabela_hash.h	/^void apagaTabelaHash(TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
arraycell	mod_tabela_hash.h	/^	MainListPTR *arraycell;$/;"	m	struct:TabelaHash	access:public
aumentaTabelaHash	mod_tabela_hash.c	/^int aumentaTabelaHash (TabelaHashPTR table)$/;"	f	signature:(TabelaHashPTR table)
aumentaTabelaHash	mod_tabela_hash.h	/^int aumentaTabelaHash (TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
camiao_compararId	dados.c	/^int camiao_compararId(void* camiaoUm, void* camiaoDois){$/;"	f	signature:(void* camiaoUm, void* camiaoDois)
camiao_compararId	dados.h	/^int camiao_compararId(void* camiaoUm, void* camiaoDois);$/;"	p	signature:(void* camiaoUm, void* camiaoDois)
camiao_compararMatricula	dados.c	/^int camiao_compararMatricula(void* camiaoUm, void* camiaoDois){$/;"	f	signature:(void* camiaoUm, void* camiaoDois)
camiao_compararMatricula	dados.h	/^int camiao_compararMatricula(void* camiaoUm, void* camiaoDois);$/;"	p	signature:(void* camiaoUm, void* camiaoDois)
camiao_dump	dados.c	/^void camiao_dump( void* camiao ){$/;"	f	signature:( void* camiao )
camiao_dump	dados.h	/^void camiao_dump( void* camiao );$/;"	p	signature:( void* camiao )
camiao_novo	dados.c	/^CamiaoPt camiao_novo( unsigned int id, char *matricula, double custo, double peso ){$/;"	f	signature:( unsigned int id, char *matricula, double custo, double peso )
camiao_novo	dados.h	/^CamiaoPt camiao_novo( unsigned int id, char *matricula, double custo, double peso );$/;"	p	signature:( unsigned int id, char *matricula, double custo, double peso )
chooseSO	utils.c	/^void chooseSO(){$/;"	f
chooseSO	utils.h	/^void chooseSO();$/;"	p	signature:()
clearInputBuffer	utils.c	/^void clearInputBuffer(){$/;"	f
clearInputBuffer	utils.h	/^void clearInputBuffer();$/;"	p	signature:()
clearScreen	utils.c	/^void clearScreen(){$/;"	f
clearScreen	utils.h	/^void clearScreen();$/;"	p	signature:()
cliente_compararNif	dados.c	/^int cliente_compararNif(void* clienteUm, void* clienteDois){$/;"	f	signature:(void* clienteUm, void* clienteDois)
cliente_compararNif	dados.h	/^int cliente_compararNif(void* clienteUm, void* clienteDois);$/;"	p	signature:(void* clienteUm, void* clienteDois)
cliente_compararNome	dados.c	/^int cliente_compararNome(void* clienteUm, void* clienteDois){$/;"	f	signature:(void* clienteUm, void* clienteDois)
cliente_compararNome	dados.h	/^int cliente_compararNome(void* clienteUm, void* clienteDois);$/;"	p	signature:(void* clienteUm, void* clienteDois)
cliente_dump	dados.c	/^void cliente_dump( void* cliente ){$/;"	f	signature:( void* cliente )
cliente_dump	dados.h	/^void cliente_dump( void* cliente );$/;"	p	signature:( void* cliente )
cliente_getServico	dados.c	/^MainListPTR cliente_getServico( TreePt thisTreePt ){$/;"	f	signature:( TreePt thisTreePt )
cliente_getServico	dados.h	/^MainListPTR cliente_getServico( TreePt thisTreePt );$/;"	p	signature:( TreePt thisTreePt )
cliente_novo	dados.c	/^ClientePt cliente_novo( unsigned int nif, char *nome, char *morada, MainListPTR servicos ){$/;"	f	signature:( unsigned int nif, char *nome, char *morada, MainListPTR servicos )
cliente_novo	dados.h	/^ClientePt cliente_novo( unsigned int nif, char *nome, char *morada, MainListPTR servicos );$/;"	p	signature:( unsigned int nif, char *nome, char *morada, MainListPTR servicos )
cliente_substituiPeloNif	dados.c	/^int cliente_substituiPeloNif( MainTreePt clientesPt, unsigned int procuraNif, unsigned int nif, char *nome, char *morada ){$/;"	f	signature:( MainTreePt clientesPt, unsigned int procuraNif, unsigned int nif, char *nome, char *morada )
cliente_substituiPeloNif	dados.h	/^int cliente_substituiPeloNif( MainTreePt clientesPt, unsigned int procuraNif, unsigned int nif, char *nome, char *morada );$/;"	p	signature:( MainTreePt clientesPt, unsigned int procuraNif, unsigned int nif, char *nome, char *morada )
cliente_substituiPeloNome	dados.c	/^int cliente_substituiPeloNome( MainTreePt clientesPt, char *procuraNome, unsigned int nif, char *nome, char *morada ){$/;"	f	signature:( MainTreePt clientesPt, char *procuraNome, unsigned int nif, char *nome, char *morada )
cliente_substituiPeloNome	dados.h	/^int cliente_substituiPeloNome( MainTreePt clientesPt, char *procuraNome, unsigned int nif, char *nome, char *morada );$/;"	p	signature:( MainTreePt clientesPt, char *procuraNome, unsigned int nif, char *nome, char *morada )
comparalocalidades	dados.c	/^int comparalocalidades (void *a, void *b){$/;"	f	signature:(void *a, void *b)
comparalocalidades	dados.h	/^int comparalocalidades (void *a, void *b);$/;"	p	signature:(void *a, void *b)
compare	mod_avl_n_dimensional.h	/^    int (*compare[DIM])(void*,void*);$/;"	m	struct:sMainTree	access:public
compareligacoesida	dados.c	/^int compareligacoesida (void *a, void *b){$/;"	f	signature:(void *a, void *b)
compareligacoesida	dados.h	/^int compareligacoesida (void *a, void *b);$/;"	p	signature:(void *a, void *b)
compareligacoesvinda	dados.c	/^int compareligacoesvinda (void *a, void *b){$/;"	f	signature:(void *a, void *b)
compareligacoesvinda	dados.h	/^int compareligacoesvinda (void *a, void *b);$/;"	p	signature:(void *a, void *b)
concatStr	utils.c	/^char* concatStr(char *dest, char *src){$/;"	f	signature:(char *dest, char *src)
concatStr	utils.h	/^char* concatStr(char *dest, char *src);$/;"	p	signature:(char *dest, char *src)
criaListaLigada	mod_lista_ligada.c	/^MainListPTR criaListaLigada(int(*func_compare)(void*,void*)) $/;"	f	signature:(int(*func_compare)(void*,void*))
criaListaLigada	mod_lista_ligada.h	/^MainListPTR criaListaLigada(int(*func_compare)(void*,void*));$/;"	p	signature:(int(*func_compare)(void*,void*))
criaTabelaHash	mod_tabela_hash.c	/^TabelaHashPTR criaTabelaHash (int(*hash_function)(void*,int), int startcells, int (*func_compare)(void*,void*))$/;"	f	signature:(int(*hash_function)(void*,int), int startcells, int (*func_compare)(void*,void*))
criaTabelaHash	mod_tabela_hash.h	/^TabelaHashPTR criaTabelaHash (int(*hash_function)(void*,int), int startcells, int (*func_compare)(void*,void*));$/;"	p	signature:(int(*hash_function)(void*,int), int startcells, int (*func_compare)(void*,void*))
crialigacaoida	dados.c	/^LigacoesidaPTR crialigacaoida (char* nome, float custo, float distancia){$/;"	f	signature:(char* nome, float custo, float distancia)
crialigacaoida	dados.h	/^LigacoesidaPTR crialigacaoida (char* nome, float custo, float distancia);$/;"	p	signature:(char* nome, float custo, float distancia)
crialigacaovinda	dados.c	/^LigacoesvindaPTR crialigacaovinda (char* nome){$/;"	f	signature:(char* nome)
crialigacaovinda	dados.h	/^LigacoesvindaPTR crialigacaovinda (char* nome);$/;"	p	signature:(char* nome)
crialocalidade	dados.c	/^LocalidadePTR crialocalidade (char* nome){$/;"	f	signature:(char* nome)
crialocalidade	dados.h	/^LocalidadePTR crialocalidade (char* nome);$/;"	p	signature:(char* nome)
custo	dados.h	/^	float custo;$/;"	m	struct:Ligacoesida	access:public
custo	dados.h	/^    double custo;$/;"	m	struct:sCamiao	access:public
diminuiTabelaHash	mod_tabela_hash.c	/^int diminuiTabelaHash (TabelaHashPTR table)$/;"	f	signature:(TabelaHashPTR table)
diminuiTabelaHash	mod_tabela_hash.h	/^int diminuiTabelaHash (TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
distancia	dados.h	/^	float distancia;$/;"	m	struct:Ligacoesida	access:public
elems	mod_lista_ligada.h	/^	LinkedListPTR elems;     			\/\/ Apontador para uma lista ligada                    $/;"	m	struct:MainList	access:public
extdata	mod_lista_ligada.h	/^	void *extdata;      		\/\/ Apontador para o elemento da lista       $/;"	m	struct:linkedList	access:public
func_compare	mod_lista_ligada.h	/^	int (*func_compare)(void*,void*);   \/\/ Função de comparação de elementos da lista ligada$/;"	m	struct:MainList	access:public
getInput	menu.c	/^int getInput(int input, MainTreePt camioes, MainTreePt clientes){$/;"	f	signature:(int input, MainTreePt camioes, MainTreePt clientes)
getInput	menu.h	/^int getInput(int input, MainTreePt camioes, MainTreePt clientes);$/;"	p	signature:(int input, MainTreePt camioes, MainTreePt clientes)
getIntLoop	menu.c	/^int getIntLoop(){$/;"	f
getIntLoop	menu.h	/^int getIntLoop();$/;"	p	signature:()
hash_function	mod_tabela_hash.h	/^	int (*hash_function)(void*,int);$/;"	m	struct:TabelaHash	access:public
hashprint	dados.c	/^void hashprint (TabelaHashPTR table){$/;"	f	signature:(TabelaHashPTR table)
hashprint	dados.h	/^void hashprint (TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
height	mod_avl_n_dimensional.h	/^    int height[DIM];$/;"	m	struct:sTree	access:public
id	dados.h	/^    unsigned int id;$/;"	m	struct:sCamiao	access:public
imprimelista	dados.c	/^void imprimelista(LinkedListPTR lista){$/;"	f	signature:(LinkedListPTR lista)
imprimelista	dados.h	/^void imprimelista(LinkedListPTR lista);$/;"	p	signature:(LinkedListPTR lista)
imprimelistaligacoes	dados.c	/^void imprimelistaligacoes(LinkedListPTR lista){$/;"	f	signature:(LinkedListPTR lista)
imprimelistaligacoes	dados.h	/^void imprimelistaligacoes(LinkedListPTR lista);$/;"	p	signature:(LinkedListPTR lista)
inicializarAtalhos	menu.c	/^void inicializarAtalhos(){$/;"	f
inicializarAtalhos	menu.h	/^void inicializarAtalhos();$/;"	p	signature:()
insereElementoTabelaHash	mod_tabela_hash.c	/^int insereElementoTabelaHash (TabelaHashPTR table, void *externdata)$/;"	f	signature:(TabelaHashPTR table, void *externdata)
insereElementoTabelaHash	mod_tabela_hash.h	/^int insereElementoTabelaHash (TabelaHashPTR table, void *externdata);$/;"	p	signature:(TabelaHashPTR table, void *externdata)
insereListaInicio	mod_lista_ligada.c	/^ int insereListaInicio(MainListPTR lista, void *externdata) $/;"	f	signature:(MainListPTR lista, void *externdata)
insereListaInicio	mod_lista_ligada.h	/^ int insereListaInicio(MainListPTR lista, void *externdata); $/;"	p	signature:(MainListPTR lista, void *externdata)
insereListaOrdenado	mod_lista_ligada.c	/^int insereListaOrdenado (MainListPTR lista, void *externdata)$/;"	f	signature:(MainListPTR lista, void *externdata)
insereListaOrdenado	mod_lista_ligada.h	/^ int insereListaOrdenado (MainListPTR lista, void *externdata);$/;"	p	signature:(MainListPTR lista, void *externdata)
insereligacaoinput	dados.c	/^void insereligacaoinput(TabelaHashPTR table){$/;"	f	signature:(TabelaHashPTR table)
insereligacaoinput	dados.h	/^void insereligacaoinput(TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
insereligacaoinput	menu.h	/^void insereligacaoinput(TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
inserelocalidade	dados.c	/^int inserelocalidade (TabelaHashPTR table, char *nome){$/;"	f	signature:(TabelaHashPTR table, char *nome)
inserelocalidade	dados.h	/^int inserelocalidade (TabelaHashPTR table, char *nome);$/;"	p	signature:(TabelaHashPTR table, char *nome)
inserelocalidadeinput	dados.c	/^void inserelocalidadeinput (TabelaHashPTR table)$/;"	f	signature:(TabelaHashPTR table)
inserelocalidadeinput	dados.h	/^void inserelocalidadeinput(TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
inserelocalidadeinput	menu.h	/^void inserelocalidadeinput(TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
inserirligacao	dados.c	/^int inserirligacao(TabelaHashPTR table, char *nomeorigem, char *nomedestino, float custo, float distancia){$/;"	f	signature:(TabelaHashPTR table, char *nomeorigem, char *nomedestino, float custo, float distancia)
inserirligacao	dados.h	/^int inserirligacao(TabelaHashPTR table, char *nomeorigem, char *nomedestino, float custo, float distancia);$/;"	p	signature:(TabelaHashPTR table, char *nomeorigem, char *nomedestino, float custo, float distancia)
intcmp	utils.c	/^int intcmp(int a, int b){$/;"	f	signature:(int a, int b)
intcmp	utils.h	/^int intcmp(int a, int b);$/;"	p	signature:(int a, int b)
isDouble	utils.c	/^int isDouble(double n){$/;"	f	signature:(double n)
isDouble	utils.h	/^int isDouble(double n);$/;"	p	signature:(double n)
isInt	utils.c	/^int isInt(int n){$/;"	f	signature:(int n)
isInt	utils.h	/^int isInt(int n);$/;"	p	signature:(int n)
isUInt	utils.c	/^int isUInt(unsigned int n){$/;"	f	signature:(unsigned int n)
isUInt	utils.h	/^int isUInt(unsigned int n);$/;"	p	signature:(unsigned int n)
l	mod_avl_n_dimensional.h	/^    struct sTree *l[DIM];$/;"	m	struct:sTree	typeref:struct:sTree::sTree	access:public
lastInt	menu.c	/^static int lastInt[3];          \/**< Representação numérica dos atalhos **\/$/;"	v	file:
lastString	menu.c	/^static char lastString[3][54];  \/**<  Representação string dos atalhos  **\/$/;"	v	file:
ligacoesida	dados.h	/^	MainListPTR ligacoesida;$/;"	m	struct:Localidade	access:public
ligacoesvinda	dados.h	/^	MainListPTR ligacoesvinda;$/;"	m	struct:Localidade	access:public
linkedList	mod_lista_ligada.h	/^typedef struct linkedList {$/;"	s
linkedList::extdata	mod_lista_ligada.h	/^	void *extdata;      		\/\/ Apontador para o elemento da lista       $/;"	m	struct:linkedList	access:public
linkedList::prox	mod_lista_ligada.h	/^	struct linkedList *prox;	\/\/ Próximo elemento da lista$/;"	m	struct:linkedList	typeref:struct:linkedList::linkedList	access:public
main	main.c	/^int main(){$/;"	f
matricula	dados.h	/^    char *matricula;$/;"	m	struct:sCamiao	access:public
maxInt	utils.c	/^int maxInt(int a, int b){$/;"	f	signature:(int a, int b)
maxInt	utils.h	/^int maxInt(int a, int b);$/;"	p	signature:(int a, int b)
morada	dados.h	/^    char *morada;$/;"	m	struct:sCliente	access:public
nelems	mod_lista_ligada.h	/^	int nelems;  						\/\/ Numero de elementos da lista ligada$/;"	m	struct:MainList	access:public
nelems	mod_tabela_hash.h	/^	int nelems;$/;"	m	struct:TabelaHash	access:public
nif	dados.h	/^    unsigned int nif;$/;"	m	struct:sCliente	access:public
node	mod_avl_n_dimensional.h	/^    void *node;$/;"	m	struct:sTree	access:public
nodos	mod_avl_n_dimensional.h	/^    int nodos;$/;"	m	struct:sMainTree	access:public
nome	dados.h	/^	char* nome;$/;"	m	struct:Ligacoesida	access:public
nome	dados.h	/^	char* nome;$/;"	m	struct:Ligacoesvinda	access:public
nome	dados.h	/^	char* nome;$/;"	m	struct:Localidade	access:public
nome	dados.h	/^    char *nome;$/;"	m	struct:sCliente	access:public
novaEscolha	menu.c	/^static void novaEscolha(int input, char *str){$/;"	f	file:	signature:(int input, char *str)
ocupacaoTabelaHash	mod_tabela_hash.c	/^int ocupacaoTabelaHash (TabelaHashPTR table)$/;"	f	signature:(TabelaHashPTR table)
ocupacaoTabelaHash	mod_tabela_hash.h	/^int ocupacaoTabelaHash (TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
operativeSystem	utils.c	/^static char operativeSystem; \/**< Toma o valor 1 ou 2 consoante o sistema operativo em que o programa está a correr *\/$/;"	v	file:
peso	dados.h	/^    double peso;$/;"	m	struct:sCamiao	access:public
printMenu	menu.c	/^int printMenu(int input){$/;"	f	signature:(int input)
printMenu	menu.h	/^int printMenu(int input);$/;"	p	signature:(int input)
procuraElementoLista	mod_lista_ligada.c	/^LinkedListPTR procuraElementoLista (MainListPTR lista, void *externdata)$/;"	f	signature:(MainListPTR lista, void *externdata)
procuraElementoLista	mod_lista_ligada.h	/^LinkedListPTR procuraElementoLista (MainListPTR lista, void *externdata);$/;"	p	signature:(MainListPTR lista, void *externdata)
procuraTabelaHash	mod_tabela_hash.c	/^LinkedListPTR procuraTabelaHash (TabelaHashPTR table, void *externdata)$/;"	f	signature:(TabelaHashPTR table, void *externdata)
procuraTabelaHash	mod_tabela_hash.h	/^LinkedListPTR procuraTabelaHash (TabelaHashPTR table, void *externdata);$/;"	p	signature:(TabelaHashPTR table, void *externdata)
prox	mod_lista_ligada.h	/^	struct linkedList *prox;	\/\/ Próximo elemento da lista$/;"	m	struct:linkedList	typeref:struct:linkedList::linkedList	access:public
r	mod_avl_n_dimensional.h	/^    struct sTree *r[DIM];$/;"	m	struct:sTree	typeref:struct:sTree::sTree	access:public
readDouble	input.c	/^double readDouble(){$/;"	f
readDouble	input.h	/^double readDouble();$/;"	p	signature:()
readInt	input.c	/^int readInt(){$/;"	f
readInt	input.h	/^int readInt();$/;"	p	signature:()
readStr	input.c	/^char* readStr(char *ptr){$/;"	f	signature:(char *ptr)
readStr	input.h	/^char* readStr(char *ptr);$/;"	p	signature:(char *ptr)
readUInt	input.c	/^unsigned int readUInt(){$/;"	f
readUInt	input.h	/^unsigned int readUInt();$/;"	p	signature:()
removeligacaoinput	dados.c	/^void removeligacaoinput(TabelaHashPTR table){$/;"	f	signature:(TabelaHashPTR table)
removeligacaoinput	dados.h	/^void removeligacaoinput(TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
removelocalidadeinput	dados.c	/^void removelocalidadeinput(TabelaHashPTR table)$/;"	f	signature:(TabelaHashPTR table)
removelocalidadeinput	dados.h	/^void removelocalidadeinput(TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
removelocalidadeinput	menu.h	/^void removelocalidadeinput(TabelaHashPTR table);$/;"	p	signature:(TabelaHashPTR table)
removerligacao	dados.c	/^int removerligacao (TabelaHashPTR table, char *nomeorigem, char *nomedestino){$/;"	f	signature:(TabelaHashPTR table, char *nomeorigem, char *nomedestino)
removerligacao	dados.h	/^int removerligacao (TabelaHashPTR table, char *nomeorigem, char *nomedestino);$/;"	p	signature:(TabelaHashPTR table, char *nomeorigem, char *nomedestino)
removerlocalidade	dados.c	/^int removerlocalidade (TabelaHashPTR table, char *nome){$/;"	f	signature:(TabelaHashPTR table, char *nome)
removerlocalidade	dados.h	/^int removerlocalidade (TabelaHashPTR table, char *nome);$/;"	p	signature:(TabelaHashPTR table, char *nome)
sCamiao	dados.h	/^typedef struct sCamiao{$/;"	s
sCamiao::custo	dados.h	/^    double custo;$/;"	m	struct:sCamiao	access:public
sCamiao::id	dados.h	/^    unsigned int id;$/;"	m	struct:sCamiao	access:public
sCamiao::matricula	dados.h	/^    char *matricula;$/;"	m	struct:sCamiao	access:public
sCamiao::peso	dados.h	/^    double peso;$/;"	m	struct:sCamiao	access:public
sCliente	dados.h	/^typedef struct sCliente{$/;"	s
sCliente::morada	dados.h	/^    char *morada;$/;"	m	struct:sCliente	access:public
sCliente::nif	dados.h	/^    unsigned int nif;$/;"	m	struct:sCliente	access:public
sCliente::nome	dados.h	/^    char *nome;$/;"	m	struct:sCliente	access:public
sCliente::servicos	dados.h	/^    MainListPTR servicos;$/;"	m	struct:sCliente	access:public
sMainTree	mod_avl_n_dimensional.h	/^typedef struct sMainTree{$/;"	s
sMainTree::compare	mod_avl_n_dimensional.h	/^    int (*compare[DIM])(void*,void*);$/;"	m	struct:sMainTree	access:public
sMainTree::nodos	mod_avl_n_dimensional.h	/^    int nodos;$/;"	m	struct:sMainTree	access:public
sMainTree::tree	mod_avl_n_dimensional.h	/^    TreePt tree[DIM];$/;"	m	struct:sMainTree	access:public
sTree	mod_avl_n_dimensional.h	/^typedef struct sTree{$/;"	s
sTree::height	mod_avl_n_dimensional.h	/^    int height[DIM];$/;"	m	struct:sTree	access:public
sTree::l	mod_avl_n_dimensional.h	/^    struct sTree *l[DIM];$/;"	m	struct:sTree	typeref:struct:sTree::sTree	access:public
sTree::node	mod_avl_n_dimensional.h	/^    void *node;$/;"	m	struct:sTree	access:public
sTree::r	mod_avl_n_dimensional.h	/^    struct sTree *r[DIM];$/;"	m	struct:sTree	typeref:struct:sTree::sTree	access:public
servicos	dados.h	/^    MainListPTR servicos;$/;"	m	struct:sCliente	access:public
startcells	mod_tabela_hash.h	/^	int startcells;$/;"	m	struct:TabelaHash	access:public
totalcells	mod_tabela_hash.h	/^	int totalcells;$/;"	m	struct:TabelaHash	access:public
tree	mod_avl_n_dimensional.h	/^    TreePt tree[DIM];$/;"	m	struct:sMainTree	access:public
tree_applyToAllOrdered	mod_avl_n_dimensional.c	/^void tree_applyToAllOrdered(MainTreePt thisMainTree, int thisDim, void (*func)(void*)){$/;"	f	signature:(MainTreePt thisMainTree, int thisDim, void (*func)(void*))
tree_applyToAllOrdered	mod_avl_n_dimensional.h	/^void tree_applyToAllOrdered(MainTreePt thisMainTree, int thisDim, void (*func)(void*));$/;"	p	signature:(MainTreePt thisMainTree, int thisDim, void (*func)(void*))
tree_applyToAllOrderedRec	mod_avl_n_dimensional.c	/^static void tree_applyToAllOrderedRec( TreePt thisTree, void (*func)(void*), int thisDim ){$/;"	f	file:	signature:( TreePt thisTree, void (*func)(void*), int thisDim )
tree_disconnectTree	mod_avl_n_dimensional.c	/^static void tree_disconnectTree( TreePt *thisTreePt, int thisDim, int (*compare)(void*,void*) ){$/;"	f	file:	signature:( TreePt *thisTreePt, int thisDim, int (*compare)(void*,void*) )
tree_dispose	mod_avl_n_dimensional.c	/^void tree_dispose( MainTreePt *thisMainTree ){$/;"	f	signature:( MainTreePt *thisMainTree )
tree_dispose	mod_avl_n_dimensional.h	/^void tree_dispose( MainTreePt *thisMainTree );$/;"	p	signature:( MainTreePt *thisMainTree )
tree_disposeRec	mod_avl_n_dimensional.c	/^static void tree_disposeRec( TreePt *thisTreePt ){$/;"	f	file:	signature:( TreePt *thisTreePt )
tree_doubleRotateLeftRight	mod_avl_n_dimensional.c	/^static void tree_doubleRotateLeftRight( TreePt *thisTreePt, int thisDim ){$/;"	f	file:	signature:( TreePt *thisTreePt, int thisDim )
tree_doubleRotateRightLeft	mod_avl_n_dimensional.c	/^static void tree_doubleRotateRightLeft( TreePt *thisTreePt, int thisDim ){$/;"	f	file:	signature:( TreePt *thisTreePt, int thisDim )
tree_getElem	mod_avl_n_dimensional.c	/^void* tree_getElem( TreePt thisTreePt ){$/;"	f	signature:( TreePt thisTreePt )
tree_getElem	mod_avl_n_dimensional.h	/^void* tree_getElem( TreePt thisTreePt );$/;"	p	signature:( TreePt thisTreePt )
tree_getHeight	mod_avl_n_dimensional.c	/^static int tree_getHeight(TreePt tree, int thisDim){$/;"	f	file:	signature:(TreePt tree, int thisDim)
tree_insert	mod_avl_n_dimensional.c	/^int tree_insert( MainTreePt thisMainTree, void* node){$/;"	f	signature:( MainTreePt thisMainTree, void* node)
tree_insert	mod_avl_n_dimensional.h	/^int tree_insert( MainTreePt thisMainTree, void* node);$/;"	p	signature:( MainTreePt thisMainTree, void* node)
tree_insertRec	mod_avl_n_dimensional.c	/^static void tree_insertRec( TreePt *thisTree, TreePt allocd, void* node, int thisDim, int (*compare)(void*,void*)){$/;"	f	file:	signature:( TreePt *thisTree, TreePt allocd, void* node, int thisDim, int (*compare)(void*,void*))
tree_maintain	mod_avl_n_dimensional.c	/^static void tree_maintain( TreePt *thisTree, int thisDim){$/;"	f	file:	signature:( TreePt *thisTree, int thisDim)
tree_new	mod_avl_n_dimensional.c	/^MainTreePt tree_new( int (*compare[DIM])(void*,void*) ){$/;"	f	signature:( int (*compare[DIM])(void*,void*) )
tree_new	mod_avl_n_dimensional.h	/^MainTreePt tree_new( int (*compare[DIM])(void*,void*) );$/;"	p	signature:( int (*compare[DIM])(void*,void*) )
tree_pushUp	mod_avl_n_dimensional.c	/^static void tree_pushUp( TreePt *master, TreePt *thisTreePt, int thisDim, int (*compare)(void*,void*) ){$/;"	f	file:	signature:( TreePt *master, TreePt *thisTreePt, int thisDim, int (*compare)(void*,void*) )
tree_remove	mod_avl_n_dimensional.c	/^void tree_remove( MainTreePt thisMainTreePt, void* node ){$/;"	f	signature:( MainTreePt thisMainTreePt, void* node )
tree_remove	mod_avl_n_dimensional.h	/^void tree_remove( MainTreePt thisMainTreePt, void* node );$/;"	p	signature:( MainTreePt thisMainTreePt, void* node )
tree_search	mod_avl_n_dimensional.c	/^TreePt tree_search(MainTreePt thisMainTree, void* node, int thisDim){$/;"	f	signature:(MainTreePt thisMainTree, void* node, int thisDim)
tree_search	mod_avl_n_dimensional.h	/^TreePt tree_search(MainTreePt thisMainTree, void* node, int thisDim);$/;"	p	signature:(MainTreePt thisMainTree, void* node, int thisDim)
tree_searchRec	mod_avl_n_dimensional.c	/^static TreePt tree_searchRec(TreePt thisTreePt, void* node, int thisDim, int (*compare)(void*,void*)){$/;"	f	file:	signature:(TreePt thisTreePt, void* node, int thisDim, int (*compare)(void*,void*))
tree_searchTreeToDisconnect	mod_avl_n_dimensional.c	/^static void tree_searchTreeToDisconnect( TreePt *thisTreePt, int thisDim, void *node, int (*compare)(void*,void*) ){$/;"	f	file:	signature:( TreePt *thisTreePt, int thisDim, void *node, int (*compare)(void*,void*) )
tree_singleRotateLeft	mod_avl_n_dimensional.c	/^static void tree_singleRotateLeft( TreePt *thisTreePt, int thisDim ){$/;"	f	file:	signature:( TreePt *thisTreePt, int thisDim )
tree_singleRotateRight	mod_avl_n_dimensional.c	/^static void tree_singleRotateRight( TreePt *thisTreePt, int thisDim ){$/;"	f	file:	signature:( TreePt *thisTreePt, int thisDim )
uintcmp	utils.c	/^int uintcmp(unsigned int a, unsigned int b){$/;"	f	signature:(unsigned int a, unsigned int b)
uintcmp	utils.h	/^int uintcmp(unsigned int a, unsigned int b);$/;"	p	signature:(unsigned int a, unsigned int b)
